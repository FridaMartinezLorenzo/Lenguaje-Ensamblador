;PRACTICA 3 CON DIRECTIVA CORTA
;MARTINEZ LORENZO FRIDA XIMENA 402-B
.MODEL SMALL
.STACK  100

.DATA
MSG1 DB "Ingrese la cadena: $"
SALTA DB 13,10,"$"
MENU DB "MENU ",13,10,"01.- DETECTAR EL NUMERO DE VOCALES EN UNA CADENA",13,10,"02.- IMPRIMIR UNA CADENA POR PALABRAS",13,10,"03.- SALIR",13,10,"OPC: $"
ERRORMSG DB "___ERROR___$"
CONTA_VMIN DB ? 
CONTA_VMAY DB ?
RES1 DB "VOCALES MAYUSCULAS: $"
RES2 DB "VOCALES MINUSCULAS: $"
CADENA Db 180, ?, 180 DUP ("$"), "$"
;lenMAX(cadena),lenReal(cadena), contenido


.CODE
MAIN PROC FAR
   ;PROTOCOLO
   PUSH ds
   SUB ax,ax
   PUSH ax
   MOV AX,@DATA
   MOV DS,AX
  

   ;INICIA PROGRAMA
    MOV BH,00
    MOV CONTA_VMAY,BH
    MOV CONTA_VMIN,BH
    
   
    CALL LIMPIA
    MOV AH,02 ;posicionamiento de cursor
    MOV BH,00
    MOV DX,0101h
    INT 10H
    
    LEA DX, MENU
    CALL ESCRIBE_CADENA
    CALL EMPAQUETA
    CMP AL,01
    JE OPCION1
    CMP AL,02
    JE OPCION2
    CMP AL,03
    JNE ERROROPC
    JMP SALIR
    
    
    OPCION1:
        CALL UNO
        JMP SALIR
    OPCION2:
        CALL DOS
        JMP SALIR
    ERROROPC:
        LEA DX, ERRORMSG
        CALL ESCRIBE_CADENA
    SALIR:
    RET

MAIN ENDP

;PROCEDIMIENTOS

escribe_car PROC
 PUSH AX
 MOV AH,02  ; Caracter a desplegar almacenado en dl
 INT 21h
 POP AX
 RET 
escribe_car ENDP

leercadena PROC
PUSH DX
PUSH AX
LEA DX,CADENA
MOV AH,0AH
INT 21H
POP AX
POP DX
RET
leercadena ENDP

ESCRIBE_CADENA PROC
PUSH AX
MOV AH,09H
INT 21H
POP AX
RET
ESCRIBE_CADENA ENDP

LEE PROC 
    MOV AH,01 ;no podemos resguardar ax en esa subrutina porque se pierde el char
    INT 21H
    RET
LEE ENDP

EMPAQUETA PROC
    PUSH CX                 ;shift left compromete al registro cx como contador
    CALL LEE
    CALL ASCII_BINARIO      ;PROCESA EL 1ER CARACTER
    MOV CL,04
    SHL AL,CL               ;INSTRUCCION LOGICA DE CORRIMIENTO A LA IZQ
    MOV CH,AL               ;ALMACENANDO EL VALOR DE AL A UN REGISTRO AUX
    CALL LEE  ;LEER L SEGUNDO CAR
    CALL ASCII_BINARIO      ;PROCESA EL 2O. CARACTER
    ADD AL,CH               ;la subrutina empaqueta deja la suma en al
    ;MOV DL,AL
    ;CALL DESEMPAQUETA
    POP CX
    RET
EMPAQUETA ENDP
   
   
ASCII_BINARIO PROC ;EL DATO SE GUARDA EN AL
    CMP AL,30H
    JL ERROR
    CMP AL,60H
    JG LETRAMINUS
    CMP AL,39H
    JG LETRAMAYUS
    SUB AL,30H ;RESTAR 30 QUE ES EL 0
    JMP FIN
    LETRAMAYUS:
      CMP AL,41H
      JL ERROR
      CMP AL,46H
      JG ERROR
      SUB AL,37H ; RESTAR 37 PARA LLEGAR AL VALOR DE "A" QUE ES 10D
      JMP FIN
    LETRAMINUS:
      CMP AL,61H
      JL ERROR
      CMP AL,66H
      JG ERROR
      SUB AL,57H ; RESTAR 37 PARA LLEGAR AL VALOR DE "A" QUE ES 10D
      JMP FIN
   ERROR:
   ;MOV AL,00
   MOV AL,28H ;ES PARENTESIS QUE ABRE PERO ES UN CHAR NO VALIDO
      ;LEA DX,ERROR_MESSAGE
      ;CALL ESCRIBE_CADENA 
   FIN:
      RET
ASCII_BINARIO ENDP
   
BINARIO_ASCII PROC
    CMP DL,9H  
    JG SUMA37 ;Porque es un numero
    ADD DL,30H
    JMP DESENLACE
   SUMA37:
     ADD DL,37H ;el dato se va a quedar en DL
   DESENLACE: 
     RET
BINARIO_ASCII ENDP

DESEMPAQUETA PROC
   PUSH DX
   PUSH CX
   MOV DH,DL ; GUARDANDO EL VALOR ORIGINAL DE DH
   MOV CL,4
   SHR DL,CL ; CUATRO CORRIMIENTOS A LA DERECHA
   CALL BINARIO_ASCII
   CALL ESCRIBE_CAR
   MOV DL,DH
   AND DL,0FH ;RECUPERANDO EL DATO DE DH
   CALL BINARIO_ASCII
   CALL ESCRIBE_CAR
   POP CX
   POP DX
   RET
DESEMPAQUETA ENDP

LIMPIA PROC NEAR
    PUSH AX
    PUSH BX
    PUSH CX
    PUSH DX
    MOV AX,0600h
    MOV BH,50h      ; FONDO BLANCO CON PRIMER PLANO AZUL
    MOV CX,0000H
    MOV DX,184FH
    INT 10h
    POP DX
    POP CX
    POP BX
    POP AX
    RET
LIMPIA ENDP

RASTREAR_VERIFICAR PROC NEAR
    MOV AH,10H
    INT 16H
    CMP AL,00H
    JE RASTREA
    CMP AL,0E0H
    JE RASTREA
    JMP SAL1
   RASTREA:
    CMP AH,4DH ;C?digo de rastreo de la la flecha hacia la derecha->
    JNE SAL1
    
    CALL CONTAR_VOCALES
    
    ;MOSTRAMOS RESULTADOS
    MOV AH,02 ;posicionamiento de cursor
    MOV BH,00
    MOV DX,050Ah
    INT 10H
    
    LEA DX,SALTA
    CALL ESCRIBE_CADENA
    LEA DX,RES1
    CALL ESCRIBE_CADENA
    MOV DL,CONTA_VMAY
    CALL DESEMPAQUETA
    
    LEA DX,SALTA
    CALL ESCRIBE_CADENA
    LEA DX,RES2
    CALL ESCRIBE_CADENA
    MOV DL, CONTA_VMIN
    CALL DESEMPAQUETA
    
    CALL LEE
    
   SAL1: RET
RASTREAR_VERIFICAR ENDP


CONTAR_VOCALES PROC
PUSH CX
PUSH BX
PUSH DX
    MOV CX,00
    LEA SI, CADENA+1
    MOV CL, [SI]
    LEA DI, CADENA+2
 SIGUIENTE:   
    MOV DL, [DI] ;CARGAMOS EL PRIMER DATO
    MOV DH,00
    CALL IS_A_VOWELMAYUS
    CMP DH,01
    JE CONTA_MAYUS
    CALL IS_A_VOWELMINUS
    CMP DH,01
    JE CONTA_MINUS
  VALIDAR_FIN:
    MOV DH,00
    INC DI
    DEC CL
    CMP CL,0
    JNE SIGUIENTE
    JMP FIN_CONTEO
    
    CONTA_MAYUS:
       MOV BH,CONTA_VMAY
       INC BH
       MOV CONTA_VMAY,BH
       JMP VALIDAR_FIN
       
    CONTA_MINUS:
        MOV BL,CONTA_VMIN
        INC BL
        MOV CONTA_VMIN,BL
        JMP VALIDAR_FIN
FIN_CONTEO:
    POP DX
    POP BX
    POP CX
    RET
CONTAR_VOCALES ENDP


IS_A_VOWELMAYUS PROC
    CMP DL,41H
    JE YES_IT_IS
    CMP DL,45H
    JE YES_IT_IS
    CMP DL,49H
    JE YES_IT_IS
    CMP DL,4FH
    JE YES_IT_IS
    CMP DL,55H
    JE YES_IT_IS
    JMP IT_IS_NOT
    
    YES_IT_IS:
       MOV DH,01
       JMP FIN_VMAYUS
    IT_IS_NOT:
       MOV DH,00
    
    FIN_VMAYUS:
    RET 
IS_A_VOWELMAYUS ENDP



IS_A_VOWELMINUS PROC
    CMP DL,61H
    JE YES_IT_ISMIN
    CMP DL,65H
    JE YES_IT_ISMIN
    CMP DL,69H
    JE YES_IT_ISMIN
    CMP DL,6FH
    JE YES_IT_ISMIN
    CMP DL,75H
    JE YES_IT_ISMIN
    JMP IT_IS_NOTMIN
    
    YES_IT_ISMIN:
       MOV DH,01
       JMP FIN_VMINUS
       
       IT_IS_NOTMIN:
       MOV DH,00
    
       FIN_VMINUS:
    RET 
IS_A_VOWELMINUS ENDP

UNO PROC
    CALL LIMPIA
    MOV AH,02 ;posicionamiento de cursor
    MOV BH,00
    MOV DX,0101h
    INT 10H
    LEA DX, MSG1
    CALL ESCRIBE_CADENA

    CALL LEERCADENA
    
     MOV AH,02 ;posicionamiento de cursor
     MOV BH,00
     MOV DX,0502h
     INT 10H
    CALL RASTREAR_VERIFICAR
    
    
    
RET
UNO ENDP

DOS PROC
    CALL LIMPIA
    MOV AH,02 ;posicionamiento de cursor
    MOV BH,00
    MOV DX,0101h
    INT 10H
    LEA DX, MSG1
    CALL ESCRIBE_CADENA

    CALL LEERCADENA
    
    MOV AH,02 ;posicionamiento de cursor
    MOV BH,00
    MOV DX,0501h
    INT 10H
    
    MOV CX,00
    LEA SI, CADENA+1
    MOV CL, [SI]
    LEA DI, CADENA+2
OTRO: 
    MOV DL, [DI]
    CMP DL,20H
    JNE CONTINUA
    MOV AH,DL ;RESPALDAMOS
    LEA DX, SALTA
    CALL ESCRIBE_CADENA
    MOV DL,AH
    
    CONTINUA:
    INC DI
    CALL ESCRIBE_CAR
    LOOP OTRO

RET
DOS ENDP
END MAIN
