;Juego del ahorcado
INCLUDE MACRO.LIB
; DEFINICION SEGMENTO DE PILA
    PILA segment para stack 'stack'       
        DB 120 DUP (0)                   ; Define espacio en la pila
    PILA ENDS

; DEFINICION  SEGMENTO DE DATOS
DATOS SEGMENT PARA 'DATA'
    MSG1 DB 'Ingrese palabra:$'
    CADENA1 DB 40, ?, 40 DUP ("$"), "$"
    CADENA2 DB 40, ?, 40 DUP ("$"), "$"
    CADENA3 DB 40, ?, 40 DUP ("$"), "$"
    CADENA4 DB 40, ?, 40 DUP ("$"), "$"
    CADENA5 DB 40, ?, 40 DUP ("$"), "$"
    GAME1   DB 'Empecemos                  No. Intentos:$' 
    MSG2    DB 'Ingrese caracter: $'
    CADENA_AUX DB 40 DUP (20H),"$","$"
    INTENTOS DB 0
    GAME_OVER DB "HAS LLEGADO AL LIMITE DE INTENTOS, INTENTALO DE NUEVO :)$"
    CONGRA DB "FELICIDADES, LO HAS HECHO BIEN :)$"
    P1 DB 'HIHI$'
    P2 DB 'HIHI$'

BANDERA1 DB 0
DATOS ENDS


; DEFINICION  SEGMENTO DE CODIGO
CODIGO SEGMENT PARA 'CODE'
  
 MAIN PROC FAR      
 ASSUME SS:PILA, DS:DATOS, CS:CODIGO
    INICIO_DL
    MOV ES,AX
    ;INGRESO DE PALABRAS
    MOV CX,05
    SIGUIENTE:
        LIMPIAR_PANTALLA 50H
        POSICIONA_CURSOR 8,30
        ESCRIBE_CADENA MSG1
        POSICIONA_CURSOR 12,25
        CMP CX,05
        JE CAD1
        CMP CX,04
        JE CAD2
        CMP CX,03
        JE CAD3
        CMP CX,02
        JE CAD4
        CMP CX,01
        JE CAD5
        VERIFICA:
        CMP CX,0
        JE NEXT_STEP
        ;DEC CX 
        JMP SIGUIENTE
        
        CAD1: 
            LEERCADENA CADENA1
            DEC CX
            JMP VERIFICA
        CAD2: 
            LEERCADENA CADENA2
            DEC CX
            JMP VERIFICA
        CAD3: 
            LEERCADENA CADENA3
            DEC CX
            JMP VERIFICA
        CAD4: 
            LEERCADENA CADENA4
            DEC CX
            JMP VERIFICA
        CAD5: 
            LEERCADENA CADENA5
            DEC CX
            JMP SIGUIENTE
    
        NEXT_STEP:
            LIMPIAR_PANTALLA 50H
            SALTAR
            ESCRIBE_CADENA CADENA1+2
            SALTAR
            ESCRIBE_CADENA CADENA2+2
            SALTAR
            ESCRIBE_CADENA CADENA3+2
            SALTAR
            ESCRIBE_CADENA CADENA4+2
            SALTAR
            ESCRIBE_CADENA CADENA5+2
            SALTAR
            LEE
            
            ;CALL COMPARAR_CADENAS
            CALL ASIGNA1
            ;CALL ELEGIR_CADENA
   
 RET
 MAIN ENDP               ;Fin proceso (FIN DEL MAIN)

 
SEMILLA PROC
    PUSH AX
    MOV AH,2CH ; SERVICIO 2CH OBTIENE LA HORA ACTUAL EN EL SISTEMA
    INT 21H ; RETORNA CH=HORAS, EN FORMATO 00-23, MEDIANOCHE=0

    ; CL MINUTOS 00-59
    ; DH SEGUNDOS 00-59
    ; DL CENTESIMAS DE SEGUNDO 00-99

    POP AX
    RET
SEMILLA ENDP

ALEATORIO PROC
    ; XN+1=(2053*XN + 13849)MOD (2**16-1)
    ; RETORNA EL NUMERO PSEUDOALEATORIO EN AX
    MOV AX,DX ;CARGANDO A AX EL NUMERO SEMILLA tomado de la int 21H serv  2CH
    MOV DX,0 ;CARGANDO CERO EN LA POSICION MAS SIGNIFICATIVA DEL MULTIPLICANDO
    MOV BX,2053 ; MULTIPLICADOR
    MUL BX
    MOV BX,13849 ;CARGA EN BX LA CONSTANTE ADITIVA
    CLC
    ADD AX,BX ; SUMA PARTES MENOS SIGNIFICATIVAS DEL RESULTADO
    ADC DX,0 ; SUMA EL ACARREO SI ES NECESARIO
    MOV BX,0FFFFH ; CARGAR LA CONSTANTE 2**16-1
    DIV BX
    MOV AX,DX ;MUEVE EL RESIDUO AX
    RET
ALEATORIO ENDP

ESCALANDO PROC
    ; ESCALANDO EL NUMERO PSEUDOALEATORIO OBTENIDO
    MOV DX,0
    MOV BX,05H ;NUMEROS ALEATORIOS ENTRE 0 Y 9
    DIV BX
    ADD DL,DH
    
    ;MOV DL,AL
    CMP DL,0
    JE SUMA1
    JMP FIN_ES
    SUMA1:
        INC DL
    FIN_ES:
    ;DATO QUEDA EN DL
    RET
ESCALANDO ENDP

ELEGIR_CADENA PROC
PUSH CX
    CALL SEMILLA
    CALL ALEATORIO
    CALL ESCALANDO
    

    CMP DL,01
    JE C1
    CMP DL,02
    JE C2
    CMP DL,03
    JE C3
    CMP DL,04
    JE C4
    CALL ASIGNA5
    JMP SIGUIENTE_PASO
    C1:
        CALL ASIGNA1
        JMP SIGUIENTE_PASO
    C2:
        CALL ASIGNA2
        JMP SIGUIENTE_PASO
    C3:
        CALL ASIGNA3
        JMP SIGUIENTE_PASO
    C4:
        CALL ASIGNA4
        JMP SIGUIENTE_PASO
        
    SIGUIENTE_PASO:
    
POP CX
ELEGIR_CADENA ENDP

ASIGNA1 PROC
     MOSTRAR_BASE CADENA1
     DESARROLLO CADENA1, CADENA_AUX
     ;CALL BASE1 
    ;CALL DESARROLLO1
RET
ASIGNA1 ENDP

ASIGNA2 PROC
     ;MOSTRAR_BASE CADENA2
     ;DESARROLLO CADENA2, CADENA_AUX
RET
ASIGNA2 ENDP

ASIGNA3 PROC
     ;MOSTRAR_BASE CADENA3
     ;DESARROLLO CADENA3, CADENA_AUX
RET
ASIGNA3 ENDP

ASIGNA4 PROC
     ;MOSTRAR_BASE CADENA4
     ;DESARROLLO CADENA4,CADENA_AUX
RET
ASIGNA4 ENDP

ASIGNA5 PROC
     ;MOSTRAR_BASE CADENA5
     ;DESARROLLO CADENA5, CADENA_AUX
RET
ASIGNA5 ENDP

;_______________________________________________________

ACTUALIZAR_INTENTOS PROC
         ADD INTENTOS,1
         MOV AL,INTENTOS
         POSICIONA_CURSOR 2,60
         DESEMPAQUETA AL
         CMP AL,3
         JE FIN_PARTIDA_BAD
         MOV BH,01
         JMP FIN_ACTUALIZAR
         
        FIN_PARTIDA_BAD:
            LIMPIAR_PANTALLA 05H
            POSICIONA_CURSOR 10,3
            ESCRIBE_CADENA GAME_OVER
            LEE
            EXIT_PROGRAMA
FIN_ACTUALIZAR:
RET
ACTUALIZAR_INTENTOS ENDP
     

COPY PROC
         MOV BH,01
         MOV [SI],AL
         INC DI
         INC SI
RET
COPY ENDP         

COMPARAR_CADENAS PROC
PUSH DI
PUSH SI
    ;DI APUNTA A CADENAX(SEA X 1,2,3,4,5)
    ;SI APUNTA A CADENA_AUX
    ;CADENAX+1 (LONGITUD)
    CLD
    MOV CX,0
    MOV CL,[DI]
    ;MOV CX,4
    INC DI
    ;LEA SI,P2
    REPE CMPSB
    JNE EDO1 ; SALTA A COMPARAR ESTADO DE LAS BANDERAS
    MOV BANDERA1,01

    EDO1: 
    CMP BANDERA1,01
    JNE MAL1
        LIMPIAR_PANTALLA 75H
        POSICIONA_CURSOR 13,05
        ESCRIBE_CADENA CONGRA
        LEE
        EXIT_PROGRAMA
    JMP EXIT
    MAL1: 
POP SI
POP DI
EXIT:
RET   
COMPARAR_CADENAS ENDP

MENSAJE PROC
PUSH AX
MOV AH,09H
INT 21H
POP AX
RET
MENSAJE ENDP

CODIGO ENDS
END MAIN